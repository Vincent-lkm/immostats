#!/usr/bin/env python3
"""
G√©n√®re les pages HTML des villes √† partir du gabarit gab.html
"""

import json
import os
import random
from datetime import datetime

print("üî® G√©n√©ration des pages avec le gabarit...")

# Charger les donn√©es
with open('../output/cities_index.json', 'r') as f:
    cities_index = json.load(f)

with open('../output/top1000_cities.json', 'r') as f:
    top_cities = json.load(f)

# Charger le gabarit
with open('gab.html', 'r', encoding='utf-8') as f:
    template = f.read()

# Mapping d√©partements -> r√©gions
DEPT_TO_REGION = {
    '75': ('√éle-de-France', 'ile-de-france'),
    '77': ('√éle-de-France', 'ile-de-france'),
    '78': ('√éle-de-France', 'ile-de-france'),
    '91': ('√éle-de-France', 'ile-de-france'),
    '92': ('√éle-de-France', 'ile-de-france'),
    '93': ('√éle-de-France', 'ile-de-france'),
    '94': ('√éle-de-France', 'ile-de-france'),
    '95': ('√éle-de-France', 'ile-de-france'),
    '13': ('Provence-Alpes-C√¥te d\'Azur', 'paca'),
    '83': ('Provence-Alpes-C√¥te d\'Azur', 'paca'),
    '06': ('Provence-Alpes-C√¥te d\'Azur', 'paca'),
    '69': ('Auvergne-Rh√¥ne-Alpes', 'auvergne-rhone-alpes'),
    '38': ('Auvergne-Rh√¥ne-Alpes', 'auvergne-rhone-alpes'),
    '74': ('Auvergne-Rh√¥ne-Alpes', 'auvergne-rhone-alpes'),
    '31': ('Occitanie', 'occitanie'),
    '34': ('Occitanie', 'occitanie'),
    '33': ('Nouvelle-Aquitaine', 'nouvelle-aquitaine'),
    '44': ('Pays de la Loire', 'pays-de-la-loire'),
    '35': ('Bretagne', 'bretagne'),
    '59': ('Hauts-de-France', 'hauts-de-france'),
    '67': ('Grand Est', 'grand-est'),
}

# Noms de d√©partements
DEPT_NAMES = {
    '75': 'Paris',
    '13': 'Bouches-du-Rh√¥ne',
    '69': 'Rh√¥ne',
    '31': 'Haute-Garonne',
    '06': 'Alpes-Maritimes',
    '33': 'Gironde',
    '34': 'H√©rault',
    '44': 'Loire-Atlantique',
    '59': 'Nord',
    '67': 'Bas-Rhin',
    '77': 'Seine-et-Marne',
    '78': 'Yvelines',
    '91': 'Essonne',
    '92': 'Hauts-de-Seine',
    '93': 'Seine-Saint-Denis',
    '94': 'Val-de-Marne',
    '95': 'Val-d\'Oise',
    '38': 'Is√®re',
    '74': 'Haute-Savoie',
    '83': 'Var',
    '35': 'Ille-et-Vilaine',
}

# Coordonn√©es par d√©partement (pour approximation)
DEPT_COORDS = {
    '75': [48.8566, 2.3522],
    '13': [43.5297, 5.4474],
    '69': [45.764, 4.8357],
    '31': [43.6047, 1.4442],
    '06': [43.7102, 7.2620],
    '33': [44.8378, -0.5792],
    '34': [43.6119, 3.8772],
    '44': [47.2184, -1.5536],
    '59': [50.6292, 3.0573],
    '67': [48.5734, 7.7521],
}

def generate_city_page(code, city_data, limit_index=None):
    """G√©n√®re une page HTML pour une ville en utilisant le gabarit"""

    # Extraire les donn√©es de base
    if isinstance(city_data, list):
        name = city_data[0]
        price = city_data[1]
        # G√©n√©rer des donn√©es r√©alistes
        evolution = random.uniform(-3, 8)
        volume = random.randint(20, 500)
        population = random.randint(1000, 100000)
    else:
        name = city_data.get('n', 'Ville')
        price = city_data.get('p', 0)
        evolution = city_data.get('e', random.uniform(-3, 8))
        volume = city_data.get('v', random.randint(20, 500))
        population = city_data.get('po', random.randint(1000, 100000))

    # D√©partement et r√©gion
    dept_code = code[:2] if not code.startswith('97') else code[:3]
    region_info = DEPT_TO_REGION.get(dept_code, ('France', 'france'))
    region_nom = region_info[0]
    region_slug = region_info[1]
    dept_nom = DEPT_NAMES.get(dept_code, f'D√©partement {dept_code}')

    # Coordonn√©es
    coords = DEPT_COORDS.get(dept_code, [46.603354, 1.888334])
    lat = coords[0] + random.uniform(-0.3, 0.3)
    lon = coords[1] + random.uniform(-0.3, 0.3)

    # G√©n√©rer l'historique des prix (5 ans)
    years = list(range(2020, 2025))
    price_history = []
    current_price = price
    for year in reversed(years):
        price_history.insert(0, int(current_price))
        current_price = current_price * random.uniform(0.95, 0.98)

    # G√©n√©rer l'historique des volumes
    volume_history = []
    current_volume = volume
    for year in reversed(years):
        volume_history.insert(0, int(current_volume))
        current_volume = int(current_volume * random.uniform(0.85, 1.1))

    # KPIs additionnels
    surface_moy = random.randint(45, 120)
    surface_change = random.randint(-5, 3)

    prix_maison = int(price * random.uniform(110, 180))  # Les maisons sont plus grandes
    prix_maison_str = f"{prix_maison:,}‚Ç¨" if prix_maison < 1000000 else f"{prix_maison/1000000:.1f}M‚Ç¨"
    prix_maison_change = random.uniform(-2, 8)

    delai = random.randint(25, 90)
    delai_change = random.randint(-15, 10)

    tension = random.uniform(3, 9)
    tension_text = "March√© tendu" if tension > 7 else "March√© √©quilibr√©" if tension > 4 else "March√© d√©tendu"
    tension_color = "danger" if tension > 7 else "warning" if tension > 4 else "success"
    tension_icon = "‚ö†" if tension > 7 else "‚ö°" if tension > 4 else "‚úì"

    roi = random.uniform(2.5, 5.5)
    roi_change = random.uniform(-0.5, 0.5)

    volume_change = random.uniform(-10, 25)

    # R√©partition appartements/maisons
    pct_appart = random.randint(40, 80)
    pct_maison = 100 - pct_appart

    # G√©n√©rer les transactions r√©centes
    transactions_rows = []
    for i in range(5):
        tx_type = "Appartement" if random.random() < (pct_appart/100) else "Maison"
        if tx_type == "Appartement":
            tx_surface = random.randint(25, 120)
        else:
            tx_surface = random.randint(70, 250)
        tx_price_m2 = int(price * random.uniform(0.85, 1.15))
        tx_price_total = tx_surface * tx_price_m2
        tx_month = random.randint(1, 11)

        transactions_rows.append(f"""
                    <tr>
                        <td>{tx_type}</td>
                        <td>{tx_surface} m¬≤</td>
                        <td>{tx_price_total:,}‚Ç¨</td>
                        <td>{tx_price_m2:,}‚Ç¨/m¬≤</td>
                        <td>{tx_month:02d}/2024</td>
                    </tr>""")

    # Trouver des villes similaires dans le m√™me d√©partement
    similar_cities = []
    dept_cities = [(c, d) for c, d in cities_index.items() if c.startswith(dept_code) and c != code]
    random.shuffle(dept_cities)

    for city_code, city_info in dept_cities[:6]:
        if isinstance(city_info, list):
            similar_name = city_info[0]
            similar_price = city_info[1]
        else:
            similar_name = city_info.get('n', 'Ville')
            similar_price = city_info.get('p', 0)

        diff_pct = ((similar_price - price) / price * 100) if price > 0 else 0
        similar_cities.append((city_code, similar_name, similar_price, diff_pct))

    # G√©n√©rer les cartes de comparaison
    comparison_cards = []
    for sc_code, sc_name, sc_price, sc_diff in similar_cities:
        diff_sign = "+" if sc_diff > 0 else ""
        diff_color = "color: var(--success)" if sc_diff > 0 else "color: var(--danger)"
        comparison_cards.append(f"""
            <a href="{sc_code}.html" class="comparison-card">
                <div class="comparison-city">{sc_name}</div>
                <div class="comparison-price">{sc_price:,}‚Ç¨/m¬≤</div>
                <div class="comparison-diff" style="{diff_color}">
                    {diff_sign}{sc_diff:.1f}% vs {name}
                </div>
            </a>""")

    # Contenu SEO
    seo_content = f"""
            <p>
                <strong>{name}</strong> est une commune du d√©partement {dept_nom} en r√©gion {region_nom}.
                Avec une population de {population:,} habitants, elle pr√©sente un march√© immobilier
                {'dynamique' if volume > 100 else 'stable'} avec {volume} transactions enregistr√©es en 2024.
            </p>
            <p>
                Le prix moyen au m√®tre carr√© pour un appartement √† {name} est de <strong>{price:,}‚Ç¨</strong>,
                ce qui repr√©sente une √©volution de {evolution:+.1f}% sur les 12 derniers mois.
                La surface moyenne des biens vendus est de {surface_moy} m¬≤ avec un d√©lai de vente moyen
                de {delai} jours.
            </p>
            <p>
                Les appartements repr√©sentent {pct_appart}% des transactions contre {pct_maison}% pour les maisons.
                Le march√© local est caract√©ris√© par une tension de {tension:.1f}/10,
                indiquant un march√© {'tendu avec une forte demande' if tension > 7 else '√©quilibr√©' if tension > 4 else 'd√©tendu avec de nombreuses opportunit√©s'}.
            </p>
    """

    # Analyse intro
    analyse_intro = f"""
                Le march√© immobilier de {name} se caract√©rise par un prix moyen de {price:,}‚Ç¨/m¬≤
                pour les appartements et environ {prix_maison_str} pour une maison moyenne.
                Avec {volume} transactions en 2024, la commune montre une activit√©
                {'soutenue' if volume > 100 else 'mod√©r√©e'} sur le march√© immobilier local.
                L'√©volution des prix de {evolution:+.1f}% sur un an t√©moigne d'un march√©
                {'en croissance' if evolution > 0 else 'en ajustement'}.
    """

    # Typologie
    typologie_text = f"""
                Le parc immobilier de {name} se compose √† {pct_appart}% d'appartements
                avec une surface moyenne de {surface_moy} m¬≤, et {pct_maison}% de maisons
                offrant des surfaces plus g√©n√©reuses autour de {int(surface_moy * 1.8)} m¬≤.
                Les biens les plus recherch√©s sont les {random.choice(['2 pi√®ces', '3 pi√®ces', '4 pi√®ces'])}
                en appartement et les maisons avec jardin pour les familles.
    """

    # Facteurs
    facteurs = [
        "Proximit√© des transports en commun et axes routiers majeurs",
        "Pr√©sence de commerces de proximit√© et services essentiels",
        "Qualit√© des √©tablissements scolaires et infrastructures √©ducatives",
        "Espaces verts et qualit√© du cadre de vie",
        "Dynamisme √©conomique local et bassin d'emploi",
        "Projets d'am√©nagement urbain et d√©veloppement futur"
    ]
    facteurs_list = "".join([f"<li>{f}</li>" for f in random.sample(facteurs, 4)])

    # Perspectives
    perspectives_text = f"""
                Les perspectives pour le march√© immobilier de {name} restent
                {'positives' if evolution > 0 else 'stables'} avec plusieurs projets
                d'am√©nagement en cours. La demande reste {'soutenue' if tension > 6 else 'mod√©r√©e'}
                notamment pour les {'appartements familiaux' if pct_appart > 60 else 'maisons avec jardin'}.
                Les investisseurs peuvent compter sur un rendement locatif estim√© √† {roi:.1f}%,
                {'sup√©rieur' if roi > 4 else 'en ligne avec'} √† la moyenne r√©gionale.
    """

    # Remplacer tous les placeholders
    html = template
    replacements = {
        '{{VILLE_NOM}}': name,
        '{{CODE_INSEE}}': code,
        '{{PRIX_M2}}': f"{price:,}",
        '{{EVOLUTION}}': f"{evolution:+.1f}",
        '{{EVOLUTION_PCT}}': f"{abs(evolution):.1f}",
        '{{EVOLUTION_CLASS}}': 'positive' if evolution > 0 else 'negative',
        '{{EVOLUTION_ARROW}}': '‚Üë' if evolution > 0 else '‚Üì',
        '{{VOLUME}}': str(volume),
        '{{VOLUME_CHANGE}}': f"{abs(volume_change):.0f}",
        '{{VOLUME_CHANGE_CLASS}}': 'positive' if volume_change > 0 else 'negative',
        '{{VOLUME_CHANGE_ARROW}}': '‚Üë' if volume_change > 0 else '‚Üì',
        '{{PRIX_MAISON}}': prix_maison_str,
        '{{PRIX_MAISON_CHANGE}}': f"{abs(prix_maison_change):.1f}",
        '{{PRIX_MAISON_CHANGE_CLASS}}': 'positive' if prix_maison_change > 0 else 'negative',
        '{{PRIX_MAISON_ARROW}}': '‚Üë' if prix_maison_change > 0 else '‚Üì',
        '{{SURFACE_MOY}}': str(surface_moy),
        '{{SURFACE_CHANGE}}': f"{abs(surface_change)}",
        '{{SURFACE_CHANGE_CLASS}}': 'negative' if surface_change < 0 else 'positive',
        '{{SURFACE_ARROW}}': '‚Üì' if surface_change < 0 else '‚Üë',
        '{{DELAI}}': str(delai),
        '{{DELAI_CHANGE}}': f"{abs(delai_change)}",
        '{{DELAI_CHANGE_CLASS}}': 'positive' if delai_change < 0 else 'negative',
        '{{DELAI_ARROW}}': '‚Üì' if delai_change < 0 else '‚Üë',
        '{{TENSION}}': f"{tension:.1f}",
        '{{TENSION_COLOR}}': tension_color,
        '{{TENSION_ICON}}': tension_icon,
        '{{TENSION_TEXT}}': tension_text,
        '{{ROI}}': f"{roi:.1f}",
        '{{ROI_CHANGE}}': f"{abs(roi_change):.2f}",
        '{{ROI_CHANGE_CLASS}}': 'positive' if roi_change > 0 else 'negative',
        '{{ROI_ARROW}}': '‚Üë' if roi_change > 0 else '‚Üì',
        '{{REGION_NOM}}': region_nom,
        '{{REGION_SLUG}}': region_slug,
        '{{DEPT_CODE}}': dept_code,
        '{{DEPT_NOM}}': dept_nom,
        '{{LATITUDE}}': str(lat),
        '{{LONGITUDE}}': str(lon),
        '{{YEARS_LABELS}}': str(years),
        '{{PRICE_HISTORY}}': str(price_history),
        '{{VOLUME_HISTORY}}': str(volume_history),
        '{{TYPE_REPARTITION}}': f"[{pct_appart}, {pct_maison}]",
        '{{TRANSACTIONS_ROWS}}': ''.join(transactions_rows),
        '{{COMPARISON_CARDS}}': ''.join(comparison_cards),
        '{{ANALYSE_INTRO}}': analyse_intro,
        '{{TYPOLOGIE_TEXT}}': typologie_text,
        '{{FACTEURS_LIST}}': facteurs_list,
        '{{PERSPECTIVES_TEXT}}': perspectives_text,
        '{{SEO_CONTENT}}': seo_content,
    }

    for placeholder, value in replacements.items():
        html = html.replace(placeholder, str(value))

    return html

# Cr√©er le dossier ville
os.makedirs('ville', exist_ok=True)

# G√©n√©rer 10 villes pour test
print("üìù G√©n√©ration de 10 villes test avec le gabarit...")

# Prendre les 10 premi√®res villes du top 1000
cities_to_generate = list(top_cities.items())[:10]

for i, (code, city_data) in enumerate(cities_to_generate, 1):
    print(f"  {i}/10 - G√©n√©ration de {city_data.get('n', code)}...")

    html = generate_city_page(code, city_data)

    with open(f'ville/{code}.html', 'w', encoding='utf-8') as f:
        f.write(html)

print("\n‚úÖ 10 villes g√©n√©r√©es avec succ√®s!")
print("üìÅ V√©rifiez les fichiers dans site/ville/")

# Afficher les villes g√©n√©r√©es
print("\nüèôÔ∏è Villes g√©n√©r√©es:")
for code, city_data in cities_to_generate:
    name = city_data.get('n', 'Ville')
    price = city_data.get('p', 0)
    print(f"  - {name} ({code}): {price:,}‚Ç¨/m¬≤")